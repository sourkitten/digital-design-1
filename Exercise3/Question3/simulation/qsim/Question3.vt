// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2021 09:51:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Question3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Question3_vlg_sample_tst(
	A,
	B,
	C,
	sampler_tx
);
input  A;
input  B;
input  C;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Question3_vlg_check_tst (
	O1,
	O2,
	O3,
	O4,
	O5,
	sampler_rx
);
input  O1;
input  O2;
input  O3;
input  O4;
input  O5;
input sampler_rx;

reg  O1_expected;
reg  O2_expected;
reg  O3_expected;
reg  O4_expected;
reg  O5_expected;

reg  O1_prev;
reg  O2_prev;
reg  O3_prev;
reg  O4_prev;
reg  O5_prev;

reg  O1_expected_prev;
reg  O2_expected_prev;
reg  O3_expected_prev;
reg  O4_expected_prev;
reg  O5_expected_prev;

reg  last_O1_exp;
reg  last_O2_exp;
reg  last_O3_exp;
reg  last_O4_exp;
reg  last_O5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	O1_prev = O1;
	O2_prev = O2;
	O3_prev = O3;
	O4_prev = O4;
	O5_prev = O5;
end

// update expected /o prevs

always @(trigger)
begin
	O1_expected_prev = O1_expected;
	O2_expected_prev = O2_expected;
	O3_expected_prev = O3_expected;
	O4_expected_prev = O4_expected;
	O5_expected_prev = O5_expected;
end



// expected O1
initial
begin
	O1_expected = 1'bX;
end 

// expected O2
initial
begin
	O2_expected = 1'bX;
end 

// expected O3
initial
begin
	O3_expected = 1'bX;
end 

// expected O4
initial
begin
	O4_expected = 1'bX;
end 

// expected O5
initial
begin
	O5_expected = 1'bX;
end 
// generate trigger
always @(O1_expected or O1 or O2_expected or O2 or O3_expected or O3 or O4_expected or O4 or O5_expected or O5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected O1 = %b | expected O2 = %b | expected O3 = %b | expected O4 = %b | expected O5 = %b | ",O1_expected_prev,O2_expected_prev,O3_expected_prev,O4_expected_prev,O5_expected_prev);
	$display("| real O1 = %b | real O2 = %b | real O3 = %b | real O4 = %b | real O5 = %b | ",O1_prev,O2_prev,O3_prev,O4_prev,O5_prev);
`endif
	if (
		( O1_expected_prev !== 1'bx ) && ( O1_prev !== O1_expected_prev )
		&& ((O1_expected_prev !== last_O1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_expected_prev);
		$display ("     Real value = %b", O1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O1_exp = O1_expected_prev;
	end
	if (
		( O2_expected_prev !== 1'bx ) && ( O2_prev !== O2_expected_prev )
		&& ((O2_expected_prev !== last_O2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_expected_prev);
		$display ("     Real value = %b", O2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O2_exp = O2_expected_prev;
	end
	if (
		( O3_expected_prev !== 1'bx ) && ( O3_prev !== O3_expected_prev )
		&& ((O3_expected_prev !== last_O3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_expected_prev);
		$display ("     Real value = %b", O3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O3_exp = O3_expected_prev;
	end
	if (
		( O4_expected_prev !== 1'bx ) && ( O4_prev !== O4_expected_prev )
		&& ((O4_expected_prev !== last_O4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_expected_prev);
		$display ("     Real value = %b", O4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O4_exp = O4_expected_prev;
	end
	if (
		( O5_expected_prev !== 1'bx ) && ( O5_prev !== O5_expected_prev )
		&& ((O5_expected_prev !== last_O5_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_expected_prev);
		$display ("     Real value = %b", O5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O5_exp = O5_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Question3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
// wires                                               
wire O1;
wire O2;
wire O3;
wire O4;
wire O5;

wire sampler;                             

// assign statements (if any)                          
Question3 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.O1(O1),
	.O2(O2),
	.O3(O3),
	.O4(O4),
	.O5(O5)
);

// A
initial
begin
	repeat(2)
	begin
		A = 1'b0;
		A = #200000 1'b1;
		# 200000;
	end
	A = 1'b0;
end 

// B
always
begin
	B = 1'b0;
	B = #100000 1'b1;
	#100000;
end 

// C
always
begin
	C = 1'b0;
	C = #50000 1'b1;
	#50000;
end 

Question3_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.sampler_tx(sampler)
);

Question3_vlg_check_tst tb_out(
	.O1(O1),
	.O2(O2),
	.O3(O3),
	.O4(O4),
	.O5(O5),
	.sampler_rx(sampler)
);
endmodule

