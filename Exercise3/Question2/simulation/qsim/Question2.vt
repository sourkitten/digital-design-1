// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2021 09:50:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Question2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Question2_vlg_sample_tst(
	A,
	B,
	C,
	D,
	sampler_tx
);
input  A;
input  B;
input  C;
input  D;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or D)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Question2_vlg_check_tst (
	ERROR,
	W,
	X,
	Y,
	Z,
	sampler_rx
);
input  ERROR;
input  W;
input  X;
input  Y;
input  Z;
input sampler_rx;

reg  ERROR_expected;
reg  W_expected;
reg  X_expected;
reg  Y_expected;
reg  Z_expected;

reg  ERROR_prev;
reg  W_prev;
reg  X_prev;
reg  Y_prev;
reg  Z_prev;

reg  ERROR_expected_prev;
reg  W_expected_prev;
reg  X_expected_prev;
reg  Y_expected_prev;
reg  Z_expected_prev;

reg  last_ERROR_exp;
reg  last_W_exp;
reg  last_X_exp;
reg  last_Y_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	ERROR_prev = ERROR;
	W_prev = W;
	X_prev = X;
	Y_prev = Y;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	ERROR_expected_prev = ERROR_expected;
	W_expected_prev = W_expected;
	X_expected_prev = X_expected;
	Y_expected_prev = Y_expected;
	Z_expected_prev = Z_expected;
end



// expected W
initial
begin
	repeat(6)
	begin
		W_expected = 1'b0;
		W_expected = #80000 1'b1;
		# 80000;
	end
	W_expected = 1'b0;
end 

// expected X
initial
begin
	repeat(12)
	begin
		X_expected = 1'b0;
		X_expected = #40000 1'b1;
		# 40000;
	end
	X_expected = 1'b0;
end 

// expected Y
always
begin
	Y_expected = 1'b0;
	Y_expected = #20000 1'b1;
	#20000;
end 

// expected Z
always
begin
	Z_expected = 1'b0;
	Z_expected = #10000 1'b1;
	#10000;
end 

// expected ERROR
initial
begin
	ERROR_expected = 1'bX;
end 
// generate trigger
always @(ERROR_expected or ERROR or W_expected or W or X_expected or X or Y_expected or Y or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ERROR = %b | expected W = %b | expected X = %b | expected Y = %b | expected Z = %b | ",ERROR_expected_prev,W_expected_prev,X_expected_prev,Y_expected_prev,Z_expected_prev);
	$display("| real ERROR = %b | real W = %b | real X = %b | real Y = %b | real Z = %b | ",ERROR_prev,W_prev,X_prev,Y_prev,Z_prev);
`endif
	if (
		( ERROR_expected_prev !== 1'bx ) && ( ERROR_prev !== ERROR_expected_prev )
		&& ((ERROR_expected_prev !== last_ERROR_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ERROR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ERROR_expected_prev);
		$display ("     Real value = %b", ERROR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ERROR_exp = ERROR_expected_prev;
	end
	if (
		( W_expected_prev !== 1'bx ) && ( W_prev !== W_expected_prev )
		&& ((W_expected_prev !== last_W_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_expected_prev);
		$display ("     Real value = %b", W_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_exp = W_expected_prev;
	end
	if (
		( X_expected_prev !== 1'bx ) && ( X_prev !== X_expected_prev )
		&& ((X_expected_prev !== last_X_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_X_exp = X_expected_prev;
	end
	if (
		( Y_expected_prev !== 1'bx ) && ( Y_prev !== Y_expected_prev )
		&& ((Y_expected_prev !== last_Y_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Y_exp = Y_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Question2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
// wires                                               
wire ERROR;
wire W;
wire X;
wire Y;
wire Z;

wire sampler;                             

// assign statements (if any)                          
Question2 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.ERROR(ERROR),
	.W(W),
	.X(X),
	.Y(Y),
	.Z(Z)
);

// A
initial
begin
	A = 1'b0;
	A = #400000 1'b1;
	A = #400000 1'b0;
end 

// B
initial
begin
	repeat(2)
	begin
		B = 1'b0;
		B = #200000 1'b1;
		# 200000;
	end
	B = 1'b0;
end 

// C
always
begin
	C = 1'b0;
	C = #100000 1'b1;
	#100000;
end 

// D
always
begin
	D = 1'b0;
	D = #50000 1'b1;
	#50000;
end 

Question2_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.sampler_tx(sampler)
);

Question2_vlg_check_tst tb_out(
	.ERROR(ERROR),
	.W(W),
	.X(X),
	.Y(Y),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

