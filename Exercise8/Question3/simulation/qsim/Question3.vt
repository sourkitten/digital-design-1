// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2021 14:46:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Question3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Question3_vlg_sample_tst(
	A0P,
	A1P,
	A2P,
	A3P,
	CLK,
	CLR,
	LD,
	PT,
	sampler_tx
);
input  A0P;
input  A1P;
input  A2P;
input  A3P;
input  CLK;
input  CLR;
input  LD;
input  PT;
output sampler_tx;

reg sample;
time current_time;
always @(A0P or A1P or A2P or A3P or CLK or CLR or LD or PT)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Question3_vlg_check_tst (
	A0,
	A1,
	A2,
	A3,
	RCO,
	sampler_rx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  RCO;
input sampler_rx;

reg  A0_expected;
reg  A1_expected;
reg  A2_expected;
reg  A3_expected;
reg  RCO_expected;

reg  A0_prev;
reg  A1_prev;
reg  A2_prev;
reg  A3_prev;
reg  RCO_prev;

reg  A0_expected_prev;
reg  A1_expected_prev;
reg  A2_expected_prev;
reg  A3_expected_prev;
reg  RCO_expected_prev;

reg  last_A0_exp;
reg  last_A1_exp;
reg  last_A2_exp;
reg  last_A3_exp;
reg  last_RCO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	A0_prev = A0;
	A1_prev = A1;
	A2_prev = A2;
	A3_prev = A3;
	RCO_prev = RCO;
end

// update expected /o prevs

always @(trigger)
begin
	A0_expected_prev = A0_expected;
	A1_expected_prev = A1_expected;
	A2_expected_prev = A2_expected;
	A3_expected_prev = A3_expected;
	RCO_expected_prev = RCO_expected;
end



// expected A3
initial
begin
	A3_expected = 1'bX;
end 

// expected A2
initial
begin
	A2_expected = 1'bX;
end 

// expected A1
initial
begin
	A1_expected = 1'bX;
end 

// expected A0
initial
begin
	A0_expected = 1'bX;
end 

// expected RCO
initial
begin
	RCO_expected = 1'bX;
end 
// generate trigger
always @(A0_expected or A0 or A1_expected or A1 or A2_expected or A2 or A3_expected or A3 or RCO_expected or RCO)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A0 = %b | expected A1 = %b | expected A2 = %b | expected A3 = %b | expected RCO = %b | ",A0_expected_prev,A1_expected_prev,A2_expected_prev,A3_expected_prev,RCO_expected_prev);
	$display("| real A0 = %b | real A1 = %b | real A2 = %b | real A3 = %b | real RCO = %b | ",A0_prev,A1_prev,A2_prev,A3_prev,RCO_prev);
`endif
	if (
		( A0_expected_prev !== 1'bx ) && ( A0_prev !== A0_expected_prev )
		&& ((A0_expected_prev !== last_A0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A0_expected_prev);
		$display ("     Real value = %b", A0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A0_exp = A0_expected_prev;
	end
	if (
		( A1_expected_prev !== 1'bx ) && ( A1_prev !== A1_expected_prev )
		&& ((A1_expected_prev !== last_A1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A1_expected_prev);
		$display ("     Real value = %b", A1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_A1_exp = A1_expected_prev;
	end
	if (
		( A2_expected_prev !== 1'bx ) && ( A2_prev !== A2_expected_prev )
		&& ((A2_expected_prev !== last_A2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A2_expected_prev);
		$display ("     Real value = %b", A2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_A2_exp = A2_expected_prev;
	end
	if (
		( A3_expected_prev !== 1'bx ) && ( A3_prev !== A3_expected_prev )
		&& ((A3_expected_prev !== last_A3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A3_expected_prev);
		$display ("     Real value = %b", A3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_A3_exp = A3_expected_prev;
	end
	if (
		( RCO_expected_prev !== 1'bx ) && ( RCO_prev !== RCO_expected_prev )
		&& ((RCO_expected_prev !== last_RCO_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RCO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RCO_expected_prev);
		$display ("     Real value = %b", RCO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RCO_exp = RCO_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Question3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0P;
reg A1P;
reg A2P;
reg A3P;
reg CLK;
reg CLR;
reg LD;
reg PT;
// wires                                               
wire A0;
wire A1;
wire A2;
wire A3;
wire RCO;

wire sampler;                             

// assign statements (if any)                          
Question3 i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A0P(A0P),
	.A1(A1),
	.A1P(A1P),
	.A2(A2),
	.A2P(A2P),
	.A3(A3),
	.A3P(A3P),
	.CLK(CLK),
	.CLR(CLR),
	.LD(LD),
	.PT(PT),
	.RCO(RCO)
);

// A3P
initial
begin
	A3P = 1'b0;
	A3P = #300000 1'b1;
	A3P = #100000 1'b0;
end 

// A2P
initial
begin
	A2P = 1'b0;
	A2P = #300000 1'b1;
	A2P = #100000 1'b0;
end 

// A1P
initial
begin
	A1P = 1'b0;
end 

// A0P
initial
begin
	A0P = 1'b0;
	A0P = #300000 1'b1;
	A0P = #100000 1'b0;
end 

// CLR
initial
begin
	CLR = 1'b1;
	CLR = #50000 1'b0;
	CLR = #2050000 1'b1;
	CLR = #50000 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #50000 1'b1;
	#50000;
end 

// PT
initial
begin
	PT = 1'b1;
	PT = #300000 1'b0;
	PT = #100000 1'b1;
end 

// LD
initial
begin
	LD = 1'b0;
	LD = #300000 1'b1;
	LD = #100000 1'b0;
end 

Question3_vlg_sample_tst tb_sample (
	.A0P(A0P),
	.A1P(A1P),
	.A2P(A2P),
	.A3P(A3P),
	.CLK(CLK),
	.CLR(CLR),
	.LD(LD),
	.PT(PT),
	.sampler_tx(sampler)
);

Question3_vlg_check_tst tb_out(
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.RCO(RCO),
	.sampler_rx(sampler)
);
endmodule

